When would you want to use a remote repository rather than keeping all your work
local?

  When I'm working on different computers (for example, my home and working comp.) 
  or there are several contributors makes changes on my project, remote repository
  using preferred.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

  The cause is the same as for manual commiting: both commiting and pulling must
  reflect specifical logical changes in repository. Futhermore, maybe I'm not
  needed to pull EACH commit one at time. It seems more suitable to do larger piece
  of work on remote, and then pull whole of commits to local computer if needed.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

  Clone - this is making the one to one copy of repository from GitHub server to local computer, or
  between two GitHub accounts. Fork - this is cloning the repository from one account to another
  account on GitHub servers only. Branch - this is specific sequence of commits in the repository,
  which can be pushed/pulled between local computer and GitHub server one at time.
  So, when I need to copy a repository to my GitHub account from someone's GitHub account, I using
  fork. When on my local computer I want to make the same repository as on GitHub exists, I using
  clone. If I want to experiment with my idea without causing any influence on project's official version,
  I making a branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

  The offline working ability is the sense of having locally stored recent copy of remote. 
  We can commit changes locally while travelling etc. From other hand, we can compare our 
  own commits with those which were done remotely and resolve conflicts. We can do fast-forward
  merges if we have local copy of remote.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

  To collaborate without Git/GitHub I have to share info about my project somewhere in the web.
  I can use different sites and potential contributors may not be informed about my project.
  I have to communicate with another contributors via e-mail and create messages manually each 
  time. So Git and GitHub makes easier: 
    - searching projects interesting for you
    - maintaining multiple versions of the project 
    - collaborating between contributors (by messaging automation, commits synchronization, 
      pull requests etc)
  What can be harder with Git/GitHub? Maybe, need to study few concepts introduce some
  difficulty. But, actually, it isn't a big problem. 
  
When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

  When I collaborating with other participants via GitHub, then I making changes in the 
  project in a separate branch - not in the master directly. This approach allows discussing the
  changes and making experiments without risk of master branch spoiling. Compare with
  direct commiting in the maser branch, separate branch supporting and pull requests are
  more tricky, but it's safely.
